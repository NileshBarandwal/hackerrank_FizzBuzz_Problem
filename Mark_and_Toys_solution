**C++**

//Note : Bubble sort cannot be used as it take's lot's of time

#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the maximumToys function below.
int maximumToys(vector<int> prices, int k)
 {

   int count=0,sum=0;  
        //Insertion sort
        int i, key, j;  
             for (i = 1; i < prices.size(); i++) 
                {  
                  key = prices[i];  
                  j = i - 1;  

                 /* Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position */
                     while (j >= 0 && prices[j] > key) 
                        {  
                         prices[j + 1] = prices[j];  
                         j = j - 1;  
                        }  
                         prices[j + 1] = key;  
    }  

     for(int i=0;i<prices.size();i++)
     {
         if(sum <= k)
         {
             sum=sum+prices[i];
             count++;
         }


     }
     return count-1;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    string prices_temp_temp;
    getline(cin, prices_temp_temp);

    vector<string> prices_temp = split_string(prices_temp_temp);

    vector<int> prices(n);

    for (int i = 0; i < n; i++) {
        int prices_item = stoi(prices_temp[i]);

        prices[i] = prices_item;
    }

    int result = maximumToys(prices, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}

**Java**

  int count=0,sum=0;  
     Arrays.sort(prices);  
     for(int i=0;i<prices.length;i++)
     {
         if(sum <= k)
         {
             sum=sum+prices[i];
             count++;
         }


     }
     return count-1;
